{"version":3,"file":"boid.js","sources":["../src/vec2.js","../src/boid.js"],"sourcesContent":["const {acos, atan2, cos, sin, sqrt} = Math;\n\nconst pool = [];\n\nexport default class Vec2 {\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    add(vec) {\n        this.x = this.x + vec.x;\n        this.y = this.y + vec.y;\n        return this;\n    }\n\n    subtract(vec) {\n        this.x = this.x - vec.x;\n        this.y = this.y - vec.y;\n        return this;\n    }\n\n    normalize() {\n        const lsq = this.lengthSquared;\n        if (lsq === 0) {\n            this.x = 1;\n            return this;\n        }\n        if (lsq === 1) {\n            return this;\n        }\n        const l = sqrt(lsq);\n        this.x /= l;\n        this.y /= l;\n        return this;\n    }\n\n    isNormalized() {\n        return this.lengthSquared === 1;\n    }\n\n    truncate(max) {\n        // if (this.length > max) {\n        if (this.lengthSquared > max * max) {\n            this.length = max;\n        }\n        return this;\n    }\n\n    scaleBy(mul) {\n        this.x *= mul;\n        this.y *= mul;\n        return this;\n    }\n\n    divideBy(div) {\n        this.x /= div;\n        this.y /= div;\n        return this;\n    }\n\n    equals(vec) {\n        return this.x === vec.x && this.y === vec.y;\n    }\n\n    negate() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n\n    dotProduct(vec) {\n        /*\n        If A and B are perpendicular (at 90 degrees to each other), the result\n        of the dot product will be zero, because cos(Θ) will be zero.\n        If the angle between A and B are less than 90 degrees, the dot product\n        will be positive (greater than zero), as cos(Θ) will be positive, and\n        the vector lengths are always positive values.\n        If the angle between A and B are greater than 90 degrees, the dot\n        product will be negative (less than zero), as cos(Θ) will be negative,\n        and the vector lengths are always positive values\n        */\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n    crossProduct(vec) {\n        /*\n        The sign tells us if vec to the left (-) or the right (+) of this vec\n        */\n        return this.x * vec.y - this.y * vec.x;\n    }\n\n    distanceSq(vec) {\n        const dx = vec.x - this.x;\n        const dy = vec.y - this.y;\n        return dx * dx + dy * dy;\n    }\n\n    distance(vec) {\n        return sqrt(this.distanceSq(vec));\n    }\n\n    clone() {\n        return Vec2.get(this.x, this.y);\n    }\n\n    reset() {\n        this.x = 0;\n        this.y = 0;\n        return this;\n    }\n\n    copy(vec) {\n        this.x = vec.x;\n        this.y = vec.y;\n        return this;\n    }\n\n    perpendicular() {\n        return Vec2.get(-this.y, this.x);\n    }\n\n    sign(vec) {\n        // Determines if a given vector is to the right or left of this vector.\n        // If to the left, returns -1. If to the right, +1.\n        const p = this.perpendicular();\n        const s = p.dotProduct(vec) < 0 ? -1 : 1;\n        p.dispose();\n        return s;\n    }\n\n    set(angle, length) {\n        this.x = cos(angle) * length;\n        this.y = sin(angle) * length;\n        return this;\n    }\n\n    dispose() {\n        this.x = 0;\n        this.y = 0;\n        pool.push(this);\n    }\n\n    get lengthSquared() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    get length() {\n        return sqrt(this.lengthSquared);\n    }\n\n    set length(value) {\n        const a = this.angle;\n        this.x = cos(a) * value;\n        this.y = sin(a) * value;\n    }\n\n    get angle() {\n        return atan2(this.y, this.x);\n    }\n\n    set angle(value) {\n        const l = this.length;\n        this.x = cos(value) * l;\n        this.y = sin(value) * l;\n    }\n\n    static get(x, y) {\n        const v = pool.length > 0 ? pool.pop() : new Vec2();\n        v.x = x || 0;\n        v.y = y || 0;\n        return v;\n    }\n\n    static fill(n) {\n        while (pool.length < n) {\n            pool.push(new Vec2());\n        }\n    }\n\n    static angleBetween(a, b) {\n        if (!a.isNormalized()) {\n            a = a.clone().normalize();\n        }\n        if (!b.isNormalized()) {\n            b = b.clone().normalize();\n        }\n        return acos(a.dotProduct(b));\n    }\n}\n","import Vec2 from './vec2.js';\n\nconst PI_D2 = Math.PI / 2;\n\nconst defaults = {\n    bounds: {\n        x: 0,\n        y: 0,\n        width: 640,\n        height: 480\n    },\n    edgeBehavior: 'bounce',\n    mass: 1.0,\n    maxSpeed: 10,\n    maxForce: 1,\n    radius: 0,\n    arriveThreshold: 50,\n    wanderDistance: 10,\n    wanderRadius: 5,\n    wanderAngle: 0,\n    wanderRange: 1,\n    avoidDistance: 300,\n    avoidBuffer: 20,\n    pathThreshold: 20,\n    maxDistance: 300,\n    minDistance: 60\n};\n\nfunction getOpt(options, key) {\n    if (options && typeof options[key] !== 'undefined') {\n        return options[key];\n    }\n    return defaults[key];\n}\n\nexport default function Boid(options) {\n    let boid = null;\n    const position = Vec2.get();\n    const velocity = Vec2.get();\n    const steeringForce = Vec2.get();\n\n    const bounds = Object.assign({}, defaults.bounds, (options && options.bounds));\n\n    let edgeBehavior = getOpt(options, 'edgeBehavior');\n    let mass = getOpt(options, 'mass');\n    let maxSpeed = getOpt(options, 'maxSpeed');\n    let maxSpeedSq = maxSpeed * maxSpeed;\n    let maxForce = getOpt(options, 'maxForce');\n    let radius = getOpt(options, 'radius');\n    // arrive\n    let arriveThreshold = getOpt(options, 'arriveThreshold');\n    let arriveThresholdSq = arriveThreshold * arriveThreshold;\n    // wander\n    let wanderDistance = getOpt(options, 'wanderDistance');\n    let wanderRadius = getOpt(options, 'wanderRadius');\n    let wanderAngle = getOpt(options, 'wanderAngle');\n    let wanderRange = getOpt(options, 'wanderRange');\n    // avoid\n    let avoidDistance = getOpt(options, 'avoidDistance');\n    let avoidBuffer = getOpt(options, 'avoidBuffer');\n    // follow path\n    let pathIndex = 0;\n    let pathThreshold = getOpt(options, 'pathThreshold');\n    let pathThresholdSq = pathThreshold * pathThreshold;\n    // flock\n    let maxDistance = getOpt(options, 'maxDistance');\n    let maxDistanceSq = maxDistance * maxDistance;\n    let minDistance = getOpt(options, 'minDistance');\n    let minDistanceSq = minDistance * minDistance;\n\n    function setBounds(width, height, x, y) {\n        bounds.width = width;\n        bounds.height = height;\n        bounds.x = x || 0;\n        bounds.y = y || 0;\n\n        return boid;\n    }\n\n    function bounce() {\n        const minX = bounds.x + radius;\n        const maxX = bounds.x + bounds.width - radius;\n        if (position.x > maxX) {\n            position.x = maxX;\n            velocity.x *= -1;\n        } else if (position.x < minX) {\n            position.x = minX;\n            velocity.x *= -1;\n        }\n\n        const minY = bounds.y + radius;\n        const maxY = bounds.y + bounds.height - radius;\n        if (position.y > maxY) {\n            position.y = maxY;\n            velocity.y *= -1;\n        } else if (position.y < minY) {\n            position.y = minY;\n            velocity.y *= -1;\n        }\n    }\n\n    function wrap() {\n        const minX = bounds.x - radius;\n        const maxX = bounds.x + bounds.width + radius;\n        if (position.x > maxX) {\n            position.x = minX;\n        } else if (position.x < minX) {\n            position.x = maxX;\n        }\n\n        const minY = bounds.y - radius;\n        const maxY = bounds.y + bounds.height + radius;\n        if (position.y > maxY) {\n            position.y = minY;\n        } else if (position.y < minY) {\n            position.y = maxY;\n        }\n    }\n\n    function seek(targetVec) {\n        const desiredVelocity = targetVec.clone().subtract(position);\n        desiredVelocity.normalize();\n        desiredVelocity.scaleBy(maxSpeed);\n\n        const force = desiredVelocity.subtract(velocity);\n        steeringForce.add(force);\n        force.dispose();\n\n        return boid;\n    }\n\n    function flee(targetVec) {\n        const desiredVelocity = targetVec.clone().subtract(position);\n        desiredVelocity.normalize();\n        desiredVelocity.scaleBy(maxSpeed);\n\n        const force = desiredVelocity.subtract(velocity);\n        steeringForce.subtract(force);\n        force.dispose();\n\n        return boid;\n    }\n\n    // seek until within arriveThreshold\n    function arrive(targetVec) {\n        const desiredVelocity = targetVec.clone().subtract(position);\n        desiredVelocity.normalize();\n\n        const distanceSq = position.distanceSq(targetVec);\n        if (distanceSq > arriveThresholdSq) {\n            desiredVelocity.scaleBy(maxSpeed);\n        } else {\n            const scalar = maxSpeed * distanceSq / arriveThresholdSq;\n            desiredVelocity.scaleBy(scalar);\n        }\n        const force = desiredVelocity.subtract(velocity);\n        steeringForce.add(force);\n        force.dispose();\n\n        return boid;\n    }\n\n    // look at velocity of boid and try to predict where it's going\n    function pursue(targetBoid) {\n        const lookAheadTime = position.distanceSq(targetBoid.position) / maxSpeedSq;\n\n        const scaledVelocity = targetBoid.velocity.clone().scaleBy(lookAheadTime);\n        const predictedTarget = targetBoid.position.clone().add(scaledVelocity);\n\n        seek(predictedTarget);\n\n        scaledVelocity.dispose();\n        predictedTarget.dispose();\n\n        return boid;\n    }\n\n    // look at velocity of boid and try to predict where it's going\n    function evade(targetBoid) {\n        const lookAheadTime = position.distanceSq(targetBoid.position) / maxSpeedSq;\n\n        const scaledVelocity = targetBoid.velocity.clone().scaleBy(lookAheadTime);\n        const predictedTarget = targetBoid.position.clone().add(scaledVelocity);\n\n        flee(predictedTarget);\n\n        scaledVelocity.dispose();\n        predictedTarget.dispose();\n\n        return boid;\n    }\n\n    // wander around, changing angle by a limited amount each tick\n    function wander() {\n        const center = velocity.clone().normalize().scaleBy(wanderDistance);\n\n        const offset = Vec2.get();\n        offset.set(wanderAngle, wanderRadius);\n        // offset.length = wanderRadius;\n        // offset.angle = wanderAngle;\n        wanderAngle += Math.random() * wanderRange - wanderRange * 0.5;\n\n        const force = center.add(offset);\n        steeringForce.add(force);\n\n        offset.dispose();\n        force.dispose();\n\n        return boid;\n    }\n\n    // gets a bit rough used in combination with seeking as the boid attempts\n    // to seek straight through an object while simultaneously trying to avoid it\n    function avoid(obstacles) {\n        for (let i = 0; i < obstacles.length; i++) {\n            const obstacle = obstacles[i];\n            const heading = velocity.clone().normalize();\n\n            // vec between obstacle and boid\n            const difference = obstacle.position.clone().subtract(position);\n            const dotProd = difference.dotProduct(heading);\n\n            // if obstacle in front of boid\n            if (dotProd > 0) {\n                // vec to represent 'feeler' arm\n                const feeler = heading.clone().scaleBy(avoidDistance);\n                // project difference onto feeler\n                const projection = heading.clone().scaleBy(dotProd);\n                // distance from obstacle to feeler\n                const vecDistance = projection.subtract(difference);\n                const distance = vecDistance.length;\n                // if feeler intersects obstacle (plus buffer), and projection\n                // less than feeler length, will collide\n                if (distance < (obstacle.radius || 0) + avoidBuffer && projection.length < feeler.length) {\n                    // calc a force +/- 90 deg from vec to circ\n                    const force = heading.clone().scaleBy(maxSpeed);\n                    force.angle += difference.sign(velocity) * PI_D2;\n                    // scale force by distance (further = smaller force)\n                    const dist = projection.length / feeler.length;\n                    force.scaleBy(1 - dist);\n                    // add to steering force\n                    steeringForce.add(force);\n                    // braking force - slows boid down so it has time to turn (closer = harder)\n                    velocity.scaleBy(dist);\n\n                    force.dispose();\n                }\n                feeler.dispose();\n                projection.dispose();\n                vecDistance.dispose();\n            }\n            heading.dispose();\n            difference.dispose();\n        }\n        return boid;\n    }\n\n    // follow a path made up of an array or vectors\n    function followPath(path, loop) {\n        loop = !!loop;\n\n        const wayPoint = path[pathIndex];\n        if (!wayPoint) {\n            pathIndex = 0;\n            return boid;\n        }\n        if (position.distanceSq(wayPoint) < pathThresholdSq) {\n            if (pathIndex >= path.length - 1) {\n                if (loop) {\n                    pathIndex = 0;\n                }\n            } else {\n                pathIndex++;\n            }\n        }\n        if (pathIndex >= path.length - 1 && !loop) {\n            arrive(wayPoint);\n        } else {\n            seek(wayPoint);\n        }\n        return boid;\n    }\n\n    // is boid close enough to be in sight and facing\n    function inSight(b) {\n        if (position.distanceSq(b.position) > maxDistanceSq) {\n            return false;\n        }\n        const heading = velocity.clone().normalize();\n        const difference = b.position.clone().subtract(position);\n        const dotProd = difference.dotProduct(heading);\n\n        heading.dispose();\n        difference.dispose();\n\n        return dotProd >= 0;\n    }\n\n    // flock - group of boids loosely move together\n    function flock(boids) {\n        const averageVelocity = velocity.clone();\n        const averagePosition = Vec2.get();\n        let inSightCount = 0;\n        for (let i = 0; i < boids.length; i++) {\n            const b = boids[i];\n            if (b !== boid && inSight(b)) {\n                averageVelocity.add(b.velocity);\n                averagePosition.add(b.position);\n\n                if (position.distanceSq(b.position) < minDistanceSq) {\n                    flee(b.position);\n                }\n                inSightCount++;\n            }\n        }\n        if (inSightCount > 0) {\n            averageVelocity.divideBy(inSightCount);\n            averagePosition.divideBy(inSightCount);\n            seek(averagePosition);\n            steeringForce.add(averageVelocity.subtract(velocity));\n        }\n        averageVelocity.dispose();\n        averagePosition.dispose();\n\n        return boid;\n    }\n\n    function update() {\n        steeringForce.truncate(maxForce);\n        if (mass !== 1) {\n            steeringForce.divideBy(mass);\n        }\n        // velocity.add(steeringForce);\n        velocity.x += steeringForce.x;\n        velocity.y += steeringForce.y;\n        // steeringForce.reset();\n        steeringForce.x = 0;\n        steeringForce.y = 0;\n        velocity.truncate(maxSpeed);\n        // position.add(velocity);\n        position.x += velocity.x;\n        position.y += velocity.y;\n\n        if (edgeBehavior === Boid.EDGE_BOUNCE) {\n            bounce();\n        } else if (edgeBehavior === Boid.EDGE_WRAP) {\n            wrap();\n        }\n        return boid;\n    }\n\n    boid = {\n        bounds,\n        setBounds,\n        update,\n        pursue,\n        evade,\n        wander,\n        avoid,\n        followPath,\n        flock,\n        arrive,\n        seek,\n        flee,\n        position,\n        velocity,\n        userData: {}\n    };\n\n    // getters / setters\n    Object.defineProperties(boid, {\n        edgeBehavior: {\n            get: function() {\n                return edgeBehavior;\n            },\n            set: function(value) {\n                edgeBehavior = value;\n            }\n        },\n        mass: {\n            get: function() {\n                return mass;\n            },\n            set: function(value) {\n                mass = value;\n            }\n        },\n        maxSpeed: {\n            get: function() {\n                return maxSpeed;\n            },\n            set: function(value) {\n                maxSpeed = value;\n                maxSpeedSq = value * value;\n            }\n        },\n        maxForce: {\n            get: function() {\n                return maxForce;\n            },\n            set: function(value) {\n                maxForce = value;\n            }\n        },\n        radius: {\n            get: function() {\n                return radius;\n            },\n            set: function(value) {\n                radius = value;\n            }\n        },\n        // arrive\n        arriveThreshold: {\n            get: function() {\n                return arriveThreshold;\n            },\n            set: function(value) {\n                arriveThreshold = value;\n                arriveThresholdSq = value * value;\n            }\n        },\n        // wander\n        wanderDistance: {\n            get: function() {\n                return wanderDistance;\n            },\n            set: function(value) {\n                wanderDistance = value;\n            }\n        },\n        wanderRadius: {\n            get: function() {\n                return wanderRadius;\n            },\n            set: function(value) {\n                wanderRadius = value;\n            }\n        },\n        wanderRange: {\n            get: function() {\n                return wanderRange;\n            },\n            set: function(value) {\n                wanderRange = value;\n            }\n        },\n        // avoid\n        avoidDistance: {\n            get: function() {\n                return avoidDistance;\n            },\n            set: function(value) {\n                avoidDistance = value;\n            }\n        },\n        avoidBuffer: {\n            get: function() {\n                return avoidBuffer;\n            },\n            set: function(value) {\n                avoidBuffer = value;\n            }\n        },\n        // followPath\n        pathIndex: {\n            get: function() {\n                return pathIndex;\n            },\n            set: function(value) {\n                pathIndex = value;\n            }\n        },\n        pathThreshold: {\n            get: function() {\n                return pathThreshold;\n            },\n            set: function(value) {\n                pathThreshold = value;\n                pathThresholdSq = value * value;\n            }\n        },\n        //  flock\n        maxDistance: {\n            get: function() {\n                return maxDistance;\n            },\n            set: function(value) {\n                maxDistance = value;\n                maxDistanceSq = value * value;\n            }\n        },\n        minDistance: {\n            get: function() {\n                return minDistance;\n            },\n            set: function(value) {\n                minDistance = value;\n                minDistanceSq = value * value;\n            }\n        }\n    });\n\n    return Object.freeze(boid);\n}\n\n// edge behaviors\nBoid.EDGE_NONE = 'none';\nBoid.EDGE_BOUNCE = 'bounce';\nBoid.EDGE_WRAP = 'wrap';\n\n// vec2\nBoid.Vec2 = Vec2;\n\nBoid.vec2 = function(x, y) {\n    return Vec2.get(x, y);\n};\n\n// for defining obstacles or areas to avoid\nBoid.obstacle = function(radius, x, y) {\n    return {\n        radius: radius,\n        position: Vec2.get(x, y)\n    };\n};\n"],"names":["acos","Math","atan2","cos","sin","sqrt","pool","Vec2","x","y","add","vec","subtract","normalize","lsq","lengthSquared","l","isNormalized","truncate","max","length","scaleBy","mul","divideBy","div","equals","negate","dotProduct","crossProduct","distanceSq","dx","dy","distance","clone","get","reset","copy","perpendicular","sign","p","s","dispose","set","angle","push","v","pop","fill","n","angleBetween","a","b","value","PI_D2","PI","defaults","getOpt","options","key","Boid","boid","position","velocity","steeringForce","bounds","Object","assign","edgeBehavior","mass","maxSpeed","maxSpeedSq","maxForce","radius","arriveThreshold","arriveThresholdSq","wanderDistance","wanderRadius","wanderAngle","wanderRange","avoidDistance","avoidBuffer","pathIndex","pathThreshold","pathThresholdSq","maxDistance","maxDistanceSq","minDistance","minDistanceSq","setBounds","width","height","bounce","minX","maxX","minY","maxY","wrap","seek","targetVec","desiredVelocity","force","flee","arrive","scalar","pursue","targetBoid","lookAheadTime","scaledVelocity","predictedTarget","evade","wander","center","offset","random","avoid","obstacles","i","obstacle","heading","difference","dotProd","feeler","projection","vecDistance","dist","followPath","path","loop","wayPoint","inSight","flock","boids","averageVelocity","averagePosition","inSightCount","update","EDGE_BOUNCE","EDGE_WRAP","defineProperties","freeze","EDGE_NONE","vec2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAOA,OAA+BC,KAA/BD;IAAME,QAAyBD,KAAzBC;IAAOC,MAAkBF,KAAlBE;IAAKC,MAAaH,KAAbG;IAAKC,OAAQJ,KAARI;;;AAE9B,IAAMC,OAAO,EAAb;;IAEqBC;oBACS;YAAdC,CAAc,uEAAV,CAAU;YAAPC,CAAO,uEAAH,CAAG;;;aACjBD,CAAL,GAASA,CAAT;aACKC,CAAL,GAASA,CAAT;;;mBAGJC,mBAAIC,KAAK;aACAH,CAAL,GAAS,KAAKA,CAAL,GAASG,IAAIH,CAAtB;aACKC,CAAL,GAAS,KAAKA,CAAL,GAASE,IAAIF,CAAtB;eACO,IAAP;;;mBAGJG,6BAASD,KAAK;aACLH,CAAL,GAAS,KAAKA,CAAL,GAASG,IAAIH,CAAtB;aACKC,CAAL,GAAS,KAAKA,CAAL,GAASE,IAAIF,CAAtB;eACO,IAAP;;;mBAGJI,iCAAY;YACFC,MAAM,KAAKC,aAAjB;YACID,QAAQ,CAAZ,EAAe;iBACNN,CAAL,GAAS,CAAT;mBACO,IAAP;;YAEAM,QAAQ,CAAZ,EAAe;mBACJ,IAAP;;YAEEE,IAAIX,KAAKS,GAAL,CAAV;aACKN,CAAL,IAAUQ,CAAV;aACKP,CAAL,IAAUO,CAAV;eACO,IAAP;;;mBAGJC,uCAAe;eACJ,KAAKF,aAAL,KAAuB,CAA9B;;;mBAGJG,6BAASC,KAAK;;YAEN,KAAKJ,aAAL,GAAqBI,MAAMA,GAA/B,EAAoC;iBAC3BC,MAAL,GAAcD,GAAd;;eAEG,IAAP;;;mBAGJE,2BAAQC,KAAK;aACJd,CAAL,IAAUc,GAAV;aACKb,CAAL,IAAUa,GAAV;eACO,IAAP;;;mBAGJC,6BAASC,KAAK;aACLhB,CAAL,IAAUgB,GAAV;aACKf,CAAL,IAAUe,GAAV;eACO,IAAP;;;mBAGJC,yBAAOd,KAAK;eACD,KAAKH,CAAL,KAAWG,IAAIH,CAAf,IAAoB,KAAKC,CAAL,KAAWE,IAAIF,CAA1C;;;mBAGJiB,2BAAS;aACAlB,CAAL,GAAS,CAAC,KAAKA,CAAf;aACKC,CAAL,GAAS,CAAC,KAAKA,CAAf;eACO,IAAP;;;mBAGJkB,iCAAWhB,KAAK;;;;;;;;;;;eAWL,KAAKH,CAAL,GAASG,IAAIH,CAAb,GAAiB,KAAKC,CAAL,GAASE,IAAIF,CAArC;;;mBAGJmB,qCAAajB,KAAK;;;;eAIP,KAAKH,CAAL,GAASG,IAAIF,CAAb,GAAiB,KAAKA,CAAL,GAASE,IAAIH,CAArC;;;mBAGJqB,iCAAWlB,KAAK;YACNmB,KAAKnB,IAAIH,CAAJ,GAAQ,KAAKA,CAAxB;YACMuB,KAAKpB,IAAIF,CAAJ,GAAQ,KAAKA,CAAxB;eACOqB,KAAKA,EAAL,GAAUC,KAAKA,EAAtB;;;mBAGJC,6BAASrB,KAAK;eACHN,KAAK,KAAKwB,UAAL,CAAgBlB,GAAhB,CAAL,CAAP;;;mBAGJsB,yBAAQ;eACG1B,KAAK2B,GAAL,CAAS,KAAK1B,CAAd,EAAiB,KAAKC,CAAtB,CAAP;;;mBAGJ0B,yBAAQ;aACC3B,CAAL,GAAS,CAAT;aACKC,CAAL,GAAS,CAAT;eACO,IAAP;;;mBAGJ2B,qBAAKzB,KAAK;aACDH,CAAL,GAASG,IAAIH,CAAb;aACKC,CAAL,GAASE,IAAIF,CAAb;eACO,IAAP;;;mBAGJ4B,yCAAgB;eACL9B,KAAK2B,GAAL,CAAS,CAAC,KAAKzB,CAAf,EAAkB,KAAKD,CAAvB,CAAP;;;mBAGJ8B,qBAAK3B,KAAK;;;YAGA4B,IAAI,KAAKF,aAAL,EAAV;YACMG,IAAID,EAAEZ,UAAF,CAAahB,GAAb,IAAoB,CAApB,GAAwB,CAAC,CAAzB,GAA6B,CAAvC;UACE8B,OAAF;eACOD,CAAP;;;mBAGJE,sBAAIC,OAAOvB,QAAQ;aACVZ,CAAL,GAASL,IAAIwC,KAAJ,IAAavB,MAAtB;aACKX,CAAL,GAASL,IAAIuC,KAAJ,IAAavB,MAAtB;eACO,IAAP;;;mBAGJqB,6BAAU;aACDjC,CAAL,GAAS,CAAT;aACKC,CAAL,GAAS,CAAT;aACKmC,IAAL,CAAU,IAAV;;;SA2BGV,sBAAI1B,GAAGC,GAAG;YACPoC,IAAIvC,KAAKc,MAAL,GAAc,CAAd,GAAkBd,KAAKwC,GAAL,EAAlB,GAA+B,IAAIvC,IAAJ,EAAzC;UACEC,CAAF,GAAMA,KAAK,CAAX;UACEC,CAAF,GAAMA,KAAK,CAAX;eACOoC,CAAP;;;SAGGE,qBAAKC,GAAG;eACJ1C,KAAKc,MAAL,GAAc4B,CAArB,EAAwB;iBACfJ,IAAL,CAAU,IAAIrC,IAAJ,EAAV;;;;SAID0C,qCAAaC,GAAGC,GAAG;YAClB,CAACD,EAAEjC,YAAF,EAAL,EAAuB;gBACfiC,EAAEjB,KAAF,GAAUpB,SAAV,EAAJ;;YAEA,CAACsC,EAAElC,YAAF,EAAL,EAAuB;gBACfkC,EAAElB,KAAF,GAAUpB,SAAV,EAAJ;;eAEGb,KAAKkD,EAAEvB,UAAF,CAAawB,CAAb,CAAL,CAAP;;;;;+BA5CgB;mBACT,KAAK3C,CAAL,GAAS,KAAKA,CAAd,GAAkB,KAAKC,CAAL,GAAS,KAAKA,CAAvC;;;;+BAGS;mBACFJ,KAAK,KAAKU,aAAV,CAAP;;6BAGOqC,OAAO;gBACRF,IAAI,KAAKP,KAAf;iBACKnC,CAAL,GAASL,IAAI+C,CAAJ,IAASE,KAAlB;iBACK3C,CAAL,GAASL,IAAI8C,CAAJ,IAASE,KAAlB;;;;+BAGQ;mBACDlD,MAAM,KAAKO,CAAX,EAAc,KAAKD,CAAnB,CAAP;;6BAGM4C,OAAO;gBACPpC,IAAI,KAAKI,MAAf;iBACKZ,CAAL,GAASL,IAAIiD,KAAJ,IAAapC,CAAtB;iBACKP,CAAL,GAASL,IAAIgD,KAAJ,IAAapC,CAAtB;;;;;;AClKR,IAAMqC,QAAQpD,KAAKqD,EAAL,GAAU,CAAxB;;AAEA,IAAMC,WAAW;YACL;WACD,CADC;WAED,CAFC;eAGG,GAHH;gBAII;KALC;kBAOC,QAPD;UAQP,GARO;cASH,EATG;cAUH,CAVG;YAWL,CAXK;qBAYI,EAZJ;oBAaG,EAbH;kBAcC,CAdD;iBAeA,CAfA;iBAgBA,CAhBA;mBAiBE,GAjBF;iBAkBA,EAlBA;mBAmBE,EAnBF;iBAoBA,GApBA;iBAqBA;CArBjB;;AAwBA,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,GAAzB,EAA8B;QACtBD,WAAW,OAAOA,QAAQC,GAAR,CAAP,KAAwB,WAAvC,EAAoD;eACzCD,QAAQC,GAAR,CAAP;;WAEGH,SAASG,GAAT,CAAP;;;AAGJ,AAAe,SAASC,IAAT,CAAcF,OAAd,EAAuB;QAC9BG,OAAO,IAAX;QACMC,WAAWtD,KAAK2B,GAAL,EAAjB;QACM4B,WAAWvD,KAAK2B,GAAL,EAAjB;QACM6B,gBAAgBxD,KAAK2B,GAAL,EAAtB;;QAEM8B,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBX,SAASS,MAA3B,EAAoCP,WAAWA,QAAQO,MAAvD,CAAf;;QAEIG,eAAeX,OAAOC,OAAP,EAAgB,cAAhB,CAAnB;QACIW,OAAOZ,OAAOC,OAAP,EAAgB,MAAhB,CAAX;QACIY,WAAWb,OAAOC,OAAP,EAAgB,UAAhB,CAAf;QACIa,aAAaD,WAAWA,QAA5B;QACIE,WAAWf,OAAOC,OAAP,EAAgB,UAAhB,CAAf;QACIe,SAAShB,OAAOC,OAAP,EAAgB,QAAhB,CAAb;;QAEIgB,kBAAkBjB,OAAOC,OAAP,EAAgB,iBAAhB,CAAtB;QACIiB,oBAAoBD,kBAAkBA,eAA1C;;QAEIE,iBAAiBnB,OAAOC,OAAP,EAAgB,gBAAhB,CAArB;QACImB,eAAepB,OAAOC,OAAP,EAAgB,cAAhB,CAAnB;QACIoB,cAAcrB,OAAOC,OAAP,EAAgB,aAAhB,CAAlB;QACIqB,cAActB,OAAOC,OAAP,EAAgB,aAAhB,CAAlB;;QAEIsB,gBAAgBvB,OAAOC,OAAP,EAAgB,eAAhB,CAApB;QACIuB,cAAcxB,OAAOC,OAAP,EAAgB,aAAhB,CAAlB;;QAEIwB,YAAY,CAAhB;QACIC,gBAAgB1B,OAAOC,OAAP,EAAgB,eAAhB,CAApB;QACI0B,kBAAkBD,gBAAgBA,aAAtC;;QAEIE,cAAc5B,OAAOC,OAAP,EAAgB,aAAhB,CAAlB;QACI4B,gBAAgBD,cAAcA,WAAlC;QACIE,cAAc9B,OAAOC,OAAP,EAAgB,aAAhB,CAAlB;QACI8B,gBAAgBD,cAAcA,WAAlC;;aAESE,SAAT,CAAmBC,KAAnB,EAA0BC,MAA1B,EAAkClF,CAAlC,EAAqCC,CAArC,EAAwC;eAC7BgF,KAAP,GAAeA,KAAf;eACOC,MAAP,GAAgBA,MAAhB;eACOlF,CAAP,GAAWA,KAAK,CAAhB;eACOC,CAAP,GAAWA,KAAK,CAAhB;;eAEOmD,IAAP;;;aAGK+B,MAAT,GAAkB;YACRC,OAAO5B,OAAOxD,CAAP,GAAWgE,MAAxB;YACMqB,OAAO7B,OAAOxD,CAAP,GAAWwD,OAAOyB,KAAlB,GAA0BjB,MAAvC;YACIX,SAASrD,CAAT,GAAaqF,IAAjB,EAAuB;qBACVrF,CAAT,GAAaqF,IAAb;qBACSrF,CAAT,IAAc,CAAC,CAAf;SAFJ,MAGO,IAAIqD,SAASrD,CAAT,GAAaoF,IAAjB,EAAuB;qBACjBpF,CAAT,GAAaoF,IAAb;qBACSpF,CAAT,IAAc,CAAC,CAAf;;;YAGEsF,OAAO9B,OAAOvD,CAAP,GAAW+D,MAAxB;YACMuB,OAAO/B,OAAOvD,CAAP,GAAWuD,OAAO0B,MAAlB,GAA2BlB,MAAxC;YACIX,SAASpD,CAAT,GAAasF,IAAjB,EAAuB;qBACVtF,CAAT,GAAasF,IAAb;qBACStF,CAAT,IAAc,CAAC,CAAf;SAFJ,MAGO,IAAIoD,SAASpD,CAAT,GAAaqF,IAAjB,EAAuB;qBACjBrF,CAAT,GAAaqF,IAAb;qBACSrF,CAAT,IAAc,CAAC,CAAf;;;;aAICuF,IAAT,GAAgB;YACNJ,OAAO5B,OAAOxD,CAAP,GAAWgE,MAAxB;YACMqB,OAAO7B,OAAOxD,CAAP,GAAWwD,OAAOyB,KAAlB,GAA0BjB,MAAvC;YACIX,SAASrD,CAAT,GAAaqF,IAAjB,EAAuB;qBACVrF,CAAT,GAAaoF,IAAb;SADJ,MAEO,IAAI/B,SAASrD,CAAT,GAAaoF,IAAjB,EAAuB;qBACjBpF,CAAT,GAAaqF,IAAb;;;YAGEC,OAAO9B,OAAOvD,CAAP,GAAW+D,MAAxB;YACMuB,OAAO/B,OAAOvD,CAAP,GAAWuD,OAAO0B,MAAlB,GAA2BlB,MAAxC;YACIX,SAASpD,CAAT,GAAasF,IAAjB,EAAuB;qBACVtF,CAAT,GAAaqF,IAAb;SADJ,MAEO,IAAIjC,SAASpD,CAAT,GAAaqF,IAAjB,EAAuB;qBACjBrF,CAAT,GAAasF,IAAb;;;;aAICE,IAAT,CAAcC,SAAd,EAAyB;YACfC,kBAAkBD,UAAUjE,KAAV,GAAkBrB,QAAlB,CAA2BiD,QAA3B,CAAxB;wBACgBhD,SAAhB;wBACgBQ,OAAhB,CAAwBgD,QAAxB;;YAEM+B,QAAQD,gBAAgBvF,QAAhB,CAAyBkD,QAAzB,CAAd;sBACcpD,GAAd,CAAkB0F,KAAlB;cACM3D,OAAN;;eAEOmB,IAAP;;;aAGKyC,IAAT,CAAcH,SAAd,EAAyB;YACfC,kBAAkBD,UAAUjE,KAAV,GAAkBrB,QAAlB,CAA2BiD,QAA3B,CAAxB;wBACgBhD,SAAhB;wBACgBQ,OAAhB,CAAwBgD,QAAxB;;YAEM+B,QAAQD,gBAAgBvF,QAAhB,CAAyBkD,QAAzB,CAAd;sBACclD,QAAd,CAAuBwF,KAAvB;cACM3D,OAAN;;eAEOmB,IAAP;;;;aAIK0C,MAAT,CAAgBJ,SAAhB,EAA2B;YACjBC,kBAAkBD,UAAUjE,KAAV,GAAkBrB,QAAlB,CAA2BiD,QAA3B,CAAxB;wBACgBhD,SAAhB;;YAEMgB,aAAagC,SAAShC,UAAT,CAAoBqE,SAApB,CAAnB;YACIrE,aAAa6C,iBAAjB,EAAoC;4BAChBrD,OAAhB,CAAwBgD,QAAxB;SADJ,MAEO;gBACGkC,SAASlC,WAAWxC,UAAX,GAAwB6C,iBAAvC;4BACgBrD,OAAhB,CAAwBkF,MAAxB;;YAEEH,QAAQD,gBAAgBvF,QAAhB,CAAyBkD,QAAzB,CAAd;sBACcpD,GAAd,CAAkB0F,KAAlB;cACM3D,OAAN;;eAEOmB,IAAP;;;;aAIK4C,MAAT,CAAgBC,UAAhB,EAA4B;YAClBC,gBAAgB7C,SAAShC,UAAT,CAAoB4E,WAAW5C,QAA/B,IAA2CS,UAAjE;;YAEMqC,iBAAiBF,WAAW3C,QAAX,CAAoB7B,KAApB,GAA4BZ,OAA5B,CAAoCqF,aAApC,CAAvB;YACME,kBAAkBH,WAAW5C,QAAX,CAAoB5B,KAApB,GAA4BvB,GAA5B,CAAgCiG,cAAhC,CAAxB;;aAEKC,eAAL;;uBAEenE,OAAf;wBACgBA,OAAhB;;eAEOmB,IAAP;;;;aAIKiD,KAAT,CAAeJ,UAAf,EAA2B;YACjBC,gBAAgB7C,SAAShC,UAAT,CAAoB4E,WAAW5C,QAA/B,IAA2CS,UAAjE;;YAEMqC,iBAAiBF,WAAW3C,QAAX,CAAoB7B,KAApB,GAA4BZ,OAA5B,CAAoCqF,aAApC,CAAvB;YACME,kBAAkBH,WAAW5C,QAAX,CAAoB5B,KAApB,GAA4BvB,GAA5B,CAAgCiG,cAAhC,CAAxB;;aAEKC,eAAL;;uBAEenE,OAAf;wBACgBA,OAAhB;;eAEOmB,IAAP;;;;aAIKkD,MAAT,GAAkB;YACRC,SAASjD,SAAS7B,KAAT,GAAiBpB,SAAjB,GAA6BQ,OAA7B,CAAqCsD,cAArC,CAAf;;YAEMqC,SAASzG,KAAK2B,GAAL,EAAf;eACOQ,GAAP,CAAWmC,WAAX,EAAwBD,YAAxB;;;uBAGe3E,KAAKgH,MAAL,KAAgBnC,WAAhB,GAA8BA,cAAc,GAA3D;;YAEMsB,QAAQW,OAAOrG,GAAP,CAAWsG,MAAX,CAAd;sBACctG,GAAd,CAAkB0F,KAAlB;;eAEO3D,OAAP;cACMA,OAAN;;eAEOmB,IAAP;;;;;aAKKsD,KAAT,CAAeC,SAAf,EAA0B;aACjB,IAAIC,IAAI,CAAb,EAAgBA,IAAID,UAAU/F,MAA9B,EAAsCgG,GAAtC,EAA2C;gBACjCC,WAAWF,UAAUC,CAAV,CAAjB;gBACME,UAAUxD,SAAS7B,KAAT,GAAiBpB,SAAjB,EAAhB;;;gBAGM0G,aAAaF,SAASxD,QAAT,CAAkB5B,KAAlB,GAA0BrB,QAA1B,CAAmCiD,QAAnC,CAAnB;gBACM2D,UAAUD,WAAW5F,UAAX,CAAsB2F,OAAtB,CAAhB;;;gBAGIE,UAAU,CAAd,EAAiB;;oBAEPC,SAASH,QAAQrF,KAAR,GAAgBZ,OAAhB,CAAwB0D,aAAxB,CAAf;;oBAEM2C,aAAaJ,QAAQrF,KAAR,GAAgBZ,OAAhB,CAAwBmG,OAAxB,CAAnB;;oBAEMG,cAAcD,WAAW9G,QAAX,CAAoB2G,UAApB,CAApB;oBACMvF,WAAW2F,YAAYvG,MAA7B;;;oBAGIY,WAAW,CAACqF,SAAS7C,MAAT,IAAmB,CAApB,IAAyBQ,WAApC,IAAmD0C,WAAWtG,MAAX,GAAoBqG,OAAOrG,MAAlF,EAA0F;;wBAEhFgF,QAAQkB,QAAQrF,KAAR,GAAgBZ,OAAhB,CAAwBgD,QAAxB,CAAd;0BACM1B,KAAN,IAAe4E,WAAWjF,IAAX,CAAgBwB,QAAhB,IAA4BT,KAA3C;;wBAEMuE,OAAOF,WAAWtG,MAAX,GAAoBqG,OAAOrG,MAAxC;0BACMC,OAAN,CAAc,IAAIuG,IAAlB;;kCAEclH,GAAd,CAAkB0F,KAAlB;;6BAES/E,OAAT,CAAiBuG,IAAjB;;0BAEMnF,OAAN;;uBAEGA,OAAP;2BACWA,OAAX;4BACYA,OAAZ;;oBAEIA,OAAR;uBACWA,OAAX;;eAEGmB,IAAP;;;;aAIKiE,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;eACrB,CAAC,CAACA,IAAT;;YAEMC,WAAWF,KAAK7C,SAAL,CAAjB;YACI,CAAC+C,QAAL,EAAe;wBACC,CAAZ;mBACOpE,IAAP;;YAEAC,SAAShC,UAAT,CAAoBmG,QAApB,IAAgC7C,eAApC,EAAqD;gBAC7CF,aAAa6C,KAAK1G,MAAL,GAAc,CAA/B,EAAkC;oBAC1B2G,IAAJ,EAAU;gCACM,CAAZ;;aAFR,MAIO;;;;YAIP9C,aAAa6C,KAAK1G,MAAL,GAAc,CAA3B,IAAgC,CAAC2G,IAArC,EAA2C;mBAChCC,QAAP;SADJ,MAEO;iBACEA,QAAL;;eAEGpE,IAAP;;;;aAIKqE,OAAT,CAAiB9E,CAAjB,EAAoB;YACZU,SAAShC,UAAT,CAAoBsB,EAAEU,QAAtB,IAAkCwB,aAAtC,EAAqD;mBAC1C,KAAP;;YAEEiC,UAAUxD,SAAS7B,KAAT,GAAiBpB,SAAjB,EAAhB;YACM0G,aAAapE,EAAEU,QAAF,CAAW5B,KAAX,GAAmBrB,QAAnB,CAA4BiD,QAA5B,CAAnB;YACM2D,UAAUD,WAAW5F,UAAX,CAAsB2F,OAAtB,CAAhB;;gBAEQ7E,OAAR;mBACWA,OAAX;;eAEO+E,WAAW,CAAlB;;;;aAIKU,KAAT,CAAeC,KAAf,EAAsB;YACZC,kBAAkBtE,SAAS7B,KAAT,EAAxB;YACMoG,kBAAkB9H,KAAK2B,GAAL,EAAxB;YACIoG,eAAe,CAAnB;aACK,IAAIlB,IAAI,CAAb,EAAgBA,IAAIe,MAAM/G,MAA1B,EAAkCgG,GAAlC,EAAuC;gBAC7BjE,IAAIgF,MAAMf,CAAN,CAAV;gBACIjE,MAAMS,IAAN,IAAcqE,QAAQ9E,CAAR,CAAlB,EAA8B;gCACVzC,GAAhB,CAAoByC,EAAEW,QAAtB;gCACgBpD,GAAhB,CAAoByC,EAAEU,QAAtB;;oBAEIA,SAAShC,UAAT,CAAoBsB,EAAEU,QAAtB,IAAkC0B,aAAtC,EAAqD;yBAC5CpC,EAAEU,QAAP;;;;;YAKRyE,eAAe,CAAnB,EAAsB;4BACF/G,QAAhB,CAAyB+G,YAAzB;4BACgB/G,QAAhB,CAAyB+G,YAAzB;iBACKD,eAAL;0BACc3H,GAAd,CAAkB0H,gBAAgBxH,QAAhB,CAAyBkD,QAAzB,CAAlB;;wBAEYrB,OAAhB;wBACgBA,OAAhB;;eAEOmB,IAAP;;;aAGK2E,MAAT,GAAkB;sBACArH,QAAd,CAAuBqD,QAAvB;YACIH,SAAS,CAAb,EAAgB;0BACE7C,QAAd,CAAuB6C,IAAvB;;;iBAGK5D,CAAT,IAAcuD,cAAcvD,CAA5B;iBACSC,CAAT,IAAcsD,cAActD,CAA5B;;sBAEcD,CAAd,GAAkB,CAAlB;sBACcC,CAAd,GAAkB,CAAlB;iBACSS,QAAT,CAAkBmD,QAAlB;;iBAES7D,CAAT,IAAcsD,SAAStD,CAAvB;iBACSC,CAAT,IAAcqD,SAASrD,CAAvB;;YAEI0D,iBAAiBR,KAAK6E,WAA1B,EAAuC;;SAAvC,MAEO,IAAIrE,iBAAiBR,KAAK8E,SAA1B,EAAqC;;;eAGrC7E,IAAP;;;WAGG;sBAAA;4BAAA;sBAAA;sBAAA;oBAAA;sBAAA;oBAAA;8BAAA;oBAAA;sBAAA;kBAAA;kBAAA;0BAAA;0BAAA;kBAeO;KAfd;;;WAmBO8E,gBAAP,CAAwB9E,IAAxB,EAA8B;sBACZ;iBACL,eAAW;uBACLO,YAAP;aAFM;iBAIL,aAASf,KAAT,EAAgB;+BACFA,KAAf;;SANkB;cASpB;iBACG,eAAW;uBACLgB,IAAP;aAFF;iBAIG,aAAShB,KAAT,EAAgB;uBACVA,KAAP;;SAdkB;kBAiBhB;iBACD,eAAW;uBACLiB,QAAP;aAFE;iBAID,aAASjB,KAAT,EAAgB;2BACNA,KAAX;6BACaA,QAAQA,KAArB;;SAvBkB;kBA0BhB;iBACD,eAAW;uBACLmB,QAAP;aAFE;iBAID,aAASnB,KAAT,EAAgB;2BACNA,KAAX;;SA/BkB;gBAkClB;iBACC,eAAW;uBACLoB,MAAP;aAFA;iBAIC,aAASpB,KAAT,EAAgB;yBACRA,KAAT;;SAvCkB;;yBA2CT;iBACR,eAAW;uBACLqB,eAAP;aAFS;iBAIR,aAASrB,KAAT,EAAgB;kCACCA,KAAlB;oCACoBA,QAAQA,KAA5B;;SAjDkB;;wBAqDV;iBACP,eAAW;uBACLuB,cAAP;aAFQ;iBAIP,aAASvB,KAAT,EAAgB;iCACAA,KAAjB;;SA1DkB;sBA6DZ;iBACL,eAAW;uBACLwB,YAAP;aAFM;iBAIL,aAASxB,KAAT,EAAgB;+BACFA,KAAf;;SAlEkB;qBAqEb;iBACJ,eAAW;uBACL0B,WAAP;aAFK;iBAIJ,aAAS1B,KAAT,EAAgB;8BACHA,KAAd;;SA1EkB;;uBA8EX;iBACN,eAAW;uBACL2B,aAAP;aAFO;iBAIN,aAAS3B,KAAT,EAAgB;gCACDA,KAAhB;;SAnFkB;qBAsFb;iBACJ,eAAW;uBACL4B,WAAP;aAFK;iBAIJ,aAAS5B,KAAT,EAAgB;8BACHA,KAAd;;SA3FkB;;mBA+Ff;iBACF,eAAW;uBACL6B,SAAP;aAFG;iBAIF,aAAS7B,KAAT,EAAgB;4BACLA,KAAZ;;SApGkB;uBAuGX;iBACN,eAAW;uBACL8B,aAAP;aAFO;iBAIN,aAAS9B,KAAT,EAAgB;gCACDA,KAAhB;kCACkBA,QAAQA,KAA1B;;SA7GkB;;qBAiHb;iBACJ,eAAW;uBACLgC,WAAP;aAFK;iBAIJ,aAAShC,KAAT,EAAgB;8BACHA,KAAd;gCACgBA,QAAQA,KAAxB;;SAvHkB;qBA0Hb;iBACJ,eAAW;uBACLkC,WAAP;aAFK;iBAIJ,aAASlC,KAAT,EAAgB;8BACHA,KAAd;gCACgBA,QAAQA,KAAxB;;;KAhIZ;;WAqIOa,OAAO0E,MAAP,CAAc/E,IAAd,CAAP;;;;AAIJD,KAAKiF,SAAL,GAAiB,MAAjB;AACAjF,KAAK6E,WAAL,GAAmB,QAAnB;AACA7E,KAAK8E,SAAL,GAAiB,MAAjB;;;AAGA9E,KAAKpD,IAAL,GAAYA,IAAZ;;AAEAoD,KAAKkF,IAAL,GAAY,UAASrI,CAAT,EAAYC,CAAZ,EAAe;WAChBF,KAAK2B,GAAL,CAAS1B,CAAT,EAAYC,CAAZ,CAAP;CADJ;;;AAKAkD,KAAK0D,QAAL,GAAgB,UAAS7C,MAAT,EAAiBhE,CAAjB,EAAoBC,CAApB,EAAuB;WAC5B;gBACK+D,MADL;kBAEOjE,KAAK2B,GAAL,CAAS1B,CAAT,EAAYC,CAAZ;KAFd;CADJ;;;;"}